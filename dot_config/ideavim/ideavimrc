let mapleader=" "

set surround
set commentary
set sneak
set easymotion
set matchit
set nerdtree
set which-key

" Disable the timeout on the leader key.
set notimeout

" Disable the audible bell noise.
set visualbell

set scrolloff=4

set number
set relativenumber

set ignorecase
set smartcase
set incsearch
set gdefault

set highlightedyank
set clipboard=unnamedplus,ideaput

" Use language-specific integration in IDEA when joining lines.
set ideajoin

let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_DefaultDelay = 350

" Move between tabs
nnoremap <A-n> :tabnext<Enter>
nnoremap <A-p> :tabprev<Enter>

" Move between panes
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" IdeaVim unfortunately doesn't currently have changelist functionality, but
" these two bindings are close enough.
let g:WhichKeyDesc_last_change = "g; Jump to last change"
nnoremap g; :action JumpToLastChange<Enter>
let g:WhichKeyDesc_next_change = "g, Jump to next change"
nnoremap g, :action JumpToNextChange<Enter>

nnoremap Y y$

" This is more useful than the default of `EditorSplitLine`.
" Also, `<C-o>:action EditorCompleteStatement<Enter>` should be equivalent, but it
" doesn't return to insert mode. Maybe an IdeaVim bug?
inoremap <C-Enter> <esc>:action EditorCompleteStatement<cr>gi

let g:WhichKeyDesc_prev_method = "[[ Jump to previous method"
nnoremap [[ :action MethodUp<Enter>
let g:WhichKeyDesc_next_method = "]] Jump to next method"
nnoremap ]] :action MethodDown<Enter>

let g:WhichKeyDesc_prev_error = "[e Jump to previous error"
nnoremap [e :action GotoPreviousError<Enter>
let g:WhichKeyDesc_next_error = "]e Jump to next error"
nnoremap ]e :action GotoNextError<Enter>

let g:WhichKeyDesc_leader = "<leader> Leader"

let g:WhichKeyDesc_leader_q = "<leader>q Close current tab"
map <leader>q <Action>(CloseContent)
let g:WhichKeyDesc_leader_Q = "<leader>Q Close window"
map <leader>Q <Action>(Exit)
let g:WhichKeyDesc_leader_e = "<leader>e Show error"
map <leader>e <Action>(ShowErrorDescription)
let g:WhichKeyDesc_leader_i = "<leader>i Show intention actions"
map <leader>i <Action>(ShowIntentionActions)

let g:WhichKeyDesc_leader_w = "<leader>w Window"
let g:WhichKeyDesc_leader_wq = "<leader>wq Close window"
map <leader>wq <Action>(Exit)
let g:WhichKeyDesc_leader_wz = "<leader>wz Toggle zen mode"
map <leader>wz <Action>(ToggleZenMode)
let g:WhichKeyDesc_leader_wd = "<leader>wd Toggle distraction-free mode"
map <leader>wd <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_leader_wf = "<leader>wf Toggle full screen"
map <leader>wf <Action>(ToggleFullScreen)

let g:WhichKeyDesc_leader_b = "<leader>b Buffer"
let g:WhichKeyDesc_leader_bq = "<leader>bq Close current tab"
map <leader>bq <Action>(CloseContent)
let g:WhichKeyDesc_leader_br = "<leader>br Reopen closed tab"
map <leader>br <Action>(ReopenClosedTab)
let g:WhichKeyDesc_leader_bi = "<leader>bi Show intention actions"
map <leader>bi <Action>(ShowIntentionActions)
let g:WhichKeyDesc_leader_be = "<leader>be Show error"
map <leader>be <Action>(ShowErrorDescription)

let g:WhichKeyDesc_leader_f = "<leader>f File"
let g:WhichKeyDesc_leader_ff = "<leader>ff Open file"
map <leader>ff <action>(GotoFile)
let g:WhichKeyDesc_leader_fr = "<leader>fr Open recent file"
map <leader>fr <action>(RecentFiles)
let g:WhichKeyDesc_leader_fs = "<leader>fs Select current file in explorer"
map <leader>fs <action>(SelectInProjectView)
let g:WhichKeyDesc_leader_fc = "<leader>fc Search file contents"
map <leader>fc <action>(FindInPath)
let g:WhichKeyDesc_leader_x = "<leader>x Toggle file explorer"
map <leader>x :NERDTreeToggle<Enter>

let g:WhichKeyDesc_leader_s = "<leader>s Search"
let g:WhichKeyDesc_leader_sa = "<leader>sa Search actions"
map <leader>sa <action>(GotoAction)
let g:WhichKeyDesc_leader_sc = "<leader>sc Search classes"
map <leader>sc <action>(GotoClass)
let g:WhichKeyDesc_leader_sf = "<leader>sf Search files"
map <leader>sf <action>(GotoFile)
let g:WhichKeyDesc_leader_ss = "<leader>ss Search everywhere"
map <leader>ss <action>(SearchEverywhere)
let g:WhichKeyDesc_leader_st = "<leader>st Search for text"
map <leader>st <action>(TextSearchAction)
let g:WhichKeyDesc_leader_sz = "<leader>sz Search symbols"
map <leader>sz <action>(GotoSymbol)

let g:WhichKeyDesc_leader_r = "<leader>r Refactor"
let g:WhichKeyDesc_leader_rm = "<leader>rm Extract method"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_leader_rv = "<leader>rv Introduce variable"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_leader_rf = "<leader>rf Introduce field"
map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_leader_rs = "<leader>rs Change signature"
map <leader>rs <Action>(ChangeSignature)
let g:WhichKeyDesc_leader_rn = "<leader>rn Rename"
map <leader>rn <Action>(RenameElement)
let g:WhichKeyDesc_leader_rr = "<leader>rr View refactorings"
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

let g:WhichKeyDesc_leader_leader = "<leader><leader> EasyMotion prefix"
let g:WhichKeyDesc_leader_j = "<leader>j Jump with EasyMotion"
map <leader>j <Plug>(easymotion-s)
